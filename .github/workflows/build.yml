#
# Copyright SecureKey Technologies Inc. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

name: build

env:
  GO_VERSION: 1.18

on:
  push:
  pull_request:

jobs:
  checks:
    name: Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/checkout@v2

      - name: Run checks
        run: make checks

  unitTest:
    name: Unit test
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      matrix:
        os: [ ubuntu-latest ]
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/checkout@v2

      - name: Run unit tests
        run: make unit-test

      - name: Upload coverage to Codecov
        timeout-minutes: 10
        if: matrix.os == 'ubuntu-latest' && github.repository == 'trustbloc/ace'
        uses: codecov/codecov-action@v1.3.1
        with:
          file: ./coverage.out

  bddTest:
    name: BDD test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/checkout@v2

      - name: Run BDD tests
        run: |
          echo '127.0.0.1 testnet.orb.local' | sudo tee -a /etc/hosts
          echo '127.0.0.1 edv.trustbloc.local' | sudo tee -a /etc/hosts
          echo '127.0.0.1 kms.trustbloc.local' | sudo tee -a /etc/hosts
          make bdd-test

  publish:
    needs: [checks, unitTest, bddTest]
    if: github.event_name == 'push' && (github.repository == 'trustbloc/ace' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - run: |
          function logout {
            docker logout
          }
          trap logout EXIT
          git lfs install
          git lfs pull
          source ci/version_var.sh
          echo $DOCKER_PASSWORD | docker login ghcr.io --username $DOCKER_USER --password-stdin
          make comparator-rest-docker
          docker tag ghcr.io/trustbloc/comparator-server:latest ${COMPARATOR_SERVER_PKG}:${COMPARATOR_SERVER_TAG}
          docker push ${COMPARATOR_SERVER_PKG}:${COMPARATOR_SERVER_TAG}
          make confidential-storage-hub-docker
          docker tag ghcr.io/trustbloc/hub-confidential-storage:latest ${CONFIDENTIAL_STORAGE_HUB_PKG}:${CONFIDENTIAL_STORAGE_HUB_TAG}
          docker push ${CONFIDENTIAL_STORAGE_HUB_PKG}:${CONFIDENTIAL_STORAGE_HUB_TAG}
          make vault-server-docker
          docker tag ghcr.io/trustbloc/vault-server:latest ${VAULT_SERVER_PKG}:${VAULT_SERVER_TAG}
          docker push ${VAULT_SERVER_PKG}:${VAULT_SERVER_TAG}
          make gatekeeper-docker
          docker tag ghcr.io/trustbloc/gatekeeper:latest ${GATEKEEPER_PKG}:${GATEKEEPER_TAG}
          docker push ${GATEKEEPER_PKG}:${GATEKEEPER_TAG}
        env:
          DOCKER_USER: ${{ secrets.CR_USER }}
          DOCKER_PASSWORD: ${{ secrets.CR_PAT }}