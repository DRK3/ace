// Code generated by go-swagger; DO NOT EDIT.

// /*
// Copyright SecureKey Technologies Inc. All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
// */
//

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PostCompare(params *PostCompareParams, opts ...ClientOption) (*PostCompareOK, error)

	PostExtract(params *PostExtractParams, opts ...ClientOption) (*PostExtractOK, error)

	PostHubstoreProfiles(params *PostHubstoreProfilesParams, opts ...ClientOption) (*PostHubstoreProfilesCreated, error)

	PostHubstoreProfilesProfileIDAuthorizations(params *PostHubstoreProfilesProfileIDAuthorizationsParams, opts ...ClientOption) (*PostHubstoreProfilesProfileIDAuthorizationsCreated, error)

	PostHubstoreProfilesProfileIDQueries(params *PostHubstoreProfilesProfileIDQueriesParams, opts ...ClientOption) (*PostHubstoreProfilesProfileIDQueriesCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  PostCompare Evaluates an operator with its inputs and returns the result.
*/
func (a *Client) PostCompare(params *PostCompareParams, opts ...ClientOption) (*PostCompareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCompareParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostCompare",
		Method:             "POST",
		PathPattern:        "/compare",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostCompareReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCompareOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostCompare: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostExtract Extracts the contents of documents.
*/
func (a *Client) PostExtract(params *PostExtractParams, opts ...ClientOption) (*PostExtractOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostExtractParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostExtract",
		Method:             "POST",
		PathPattern:        "/extract",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostExtractReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostExtractOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostExtract: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostHubstoreProfiles Create new profile.
*/
func (a *Client) PostHubstoreProfiles(params *PostHubstoreProfilesParams, opts ...ClientOption) (*PostHubstoreProfilesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHubstoreProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostHubstoreProfiles",
		Method:             "POST",
		PathPattern:        "/hubstore/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostHubstoreProfilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHubstoreProfilesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostHubstoreProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostHubstoreProfilesProfileIDAuthorizations Creates a new authorization.
*/
func (a *Client) PostHubstoreProfilesProfileIDAuthorizations(params *PostHubstoreProfilesProfileIDAuthorizationsParams, opts ...ClientOption) (*PostHubstoreProfilesProfileIDAuthorizationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHubstoreProfilesProfileIDAuthorizationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostHubstoreProfilesProfileIDAuthorizations",
		Method:             "POST",
		PathPattern:        "/hubstore/profiles/{profileID}/authorizations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostHubstoreProfilesProfileIDAuthorizationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHubstoreProfilesProfileIDAuthorizationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostHubstoreProfilesProfileIDAuthorizations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostHubstoreProfilesProfileIDQueries Store queries.
*/
func (a *Client) PostHubstoreProfilesProfileIDQueries(params *PostHubstoreProfilesProfileIDQueriesParams, opts ...ClientOption) (*PostHubstoreProfilesProfileIDQueriesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHubstoreProfilesProfileIDQueriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostHubstoreProfilesProfileIDQueries",
		Method:             "POST",
		PathPattern:        "/hubstore/profiles/{profileID}/queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostHubstoreProfilesProfileIDQueriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHubstoreProfilesProfileIDQueriesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostHubstoreProfilesProfileIDQueries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
