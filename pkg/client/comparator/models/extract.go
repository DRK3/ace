// Code generated by go-swagger; DO NOT EDIT.

// Copyright SecureKey Technologies Inc. All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Extract extract
//
// swagger:model Extract
type Extract struct {
	queriesField []Query
}

// Queries gets the queries of this base type
func (m *Extract) Queries() []Query {
	return m.queriesField
}

// SetQueries sets the queries of this base type
func (m *Extract) SetQueries(val []Query) {
	m.queriesField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *Extract) UnmarshalJSON(raw []byte) error {
	var data struct {
		Queries json.RawMessage `json:"queries"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	propQueries, err := UnmarshalQuerySlice(bytes.NewBuffer(data.Queries), runtime.JSONConsumer())
	if err != nil && err != io.EOF {
		return err
	}

	var result Extract

	// queries
	result.queriesField = propQueries

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m Extract) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
	}{})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Queries []Query `json:"queries"`
	}{

		Queries: m.queriesField,
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this extract
func (m *Extract) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQueries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Extract) validateQueries(formats strfmt.Registry) error {

	if err := validate.Required("queries", "body", m.Queries()); err != nil {
		return err
	}

	for i := 0; i < len(m.Queries()); i++ {

		if err := m.queriesField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queries" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this extract based on the context it is used
func (m *Extract) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQueries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Extract) contextValidateQueries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Queries()); i++ {

		if err := m.queriesField[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queries" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Extract) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Extract) UnmarshalBinary(b []byte) error {
	var res Extract
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
