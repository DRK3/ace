// Code generated by go-swagger; DO NOT EDIT.

// Copyright SecureKey Technologies Inc. All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DocQuery DocQuery identifies a document by directly referencing the document's Vault Server vaultID and docID.
// It also contains the necessary authorization tokens to access the document at the remote Confidential Storage
// vault and decrypt with the WebKMS key.
//
//
// swagger:model DocQuery
type DocQuery struct {
	idField string

	// auth tokens
	// Required: true
	AuthTokens *DocQueryAO1AuthTokens `json:"authTokens"`

	// By default, a DocQuery identifies a document in its entirety, which means the entire contents of the
	// document are used in the comparison. `docAttrPath` is a JSONPath that allows a _portion_ of the
	// document to be used during the comparison.
	//
	DocAttrPath string `json:"docAttrPath,omitempty"`

	// an identifier for a document stored in the Vault Server.
	// Required: true
	DocID *string `json:"docID"`

	// vault ID
	// Required: true
	VaultID *string `json:"vaultID"`
}

// ID gets the id of this subtype
func (m *DocQuery) ID() string {
	return m.idField
}

// SetID sets the id of this subtype
func (m *DocQuery) SetID(val string) {
	m.idField = val
}

// Type gets the type of this subtype
func (m *DocQuery) Type() string {
	return "DocQuery"
}

// SetType sets the type of this subtype
func (m *DocQuery) SetType(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *DocQuery) UnmarshalJSON(raw []byte) error {
	var data struct {

		// auth tokens
		// Required: true
		AuthTokens *DocQueryAO1AuthTokens `json:"authTokens"`

		// By default, a DocQuery identifies a document in its entirety, which means the entire contents of the
		// document are used in the comparison. `docAttrPath` is a JSONPath that allows a _portion_ of the
		// document to be used during the comparison.
		//
		DocAttrPath string `json:"docAttrPath,omitempty"`

		// an identifier for a document stored in the Vault Server.
		// Required: true
		DocID *string `json:"docID"`

		// vault ID
		// Required: true
		VaultID *string `json:"vaultID"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		ID string `json:"id,omitempty"`

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result DocQuery

	result.idField = base.ID

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.AuthTokens = data.AuthTokens
	result.DocAttrPath = data.DocAttrPath
	result.DocID = data.DocID
	result.VaultID = data.VaultID

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m DocQuery) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// auth tokens
		// Required: true
		AuthTokens *DocQueryAO1AuthTokens `json:"authTokens"`

		// By default, a DocQuery identifies a document in its entirety, which means the entire contents of the
		// document are used in the comparison. `docAttrPath` is a JSONPath that allows a _portion_ of the
		// document to be used during the comparison.
		//
		DocAttrPath string `json:"docAttrPath,omitempty"`

		// an identifier for a document stored in the Vault Server.
		// Required: true
		DocID *string `json:"docID"`

		// vault ID
		// Required: true
		VaultID *string `json:"vaultID"`
	}{

		AuthTokens: m.AuthTokens,

		DocAttrPath: m.DocAttrPath,

		DocID: m.DocID,

		VaultID: m.VaultID,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		ID string `json:"id,omitempty"`

		Type string `json:"type"`
	}{

		ID: m.ID(),

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this doc query
func (m *DocQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthTokens(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DocQuery) validateAuthTokens(formats strfmt.Registry) error {

	if err := validate.Required("authTokens", "body", m.AuthTokens); err != nil {
		return err
	}

	if m.AuthTokens != nil {
		if err := m.AuthTokens.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authTokens")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authTokens")
			}
			return err
		}
	}

	return nil
}

func (m *DocQuery) validateDocID(formats strfmt.Registry) error {

	if err := validate.Required("docID", "body", m.DocID); err != nil {
		return err
	}

	return nil
}

func (m *DocQuery) validateVaultID(formats strfmt.Registry) error {

	if err := validate.Required("vaultID", "body", m.VaultID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this doc query based on the context it is used
func (m *DocQuery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthTokens(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DocQuery) contextValidateAuthTokens(ctx context.Context, formats strfmt.Registry) error {

	if m.AuthTokens != nil {
		if err := m.AuthTokens.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authTokens")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authTokens")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DocQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DocQuery) UnmarshalBinary(b []byte) error {
	var res DocQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DocQueryAO1AuthTokens doc query a o1 auth tokens
//
// swagger:model DocQueryAO1AuthTokens
type DocQueryAO1AuthTokens struct {

	// edv
	Edv string `json:"edv,omitempty"`

	// kms
	Kms string `json:"kms,omitempty"`
}

// Validate validates this doc query a o1 auth tokens
func (m *DocQueryAO1AuthTokens) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this doc query a o1 auth tokens based on context it is used
func (m *DocQueryAO1AuthTokens) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DocQueryAO1AuthTokens) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DocQueryAO1AuthTokens) UnmarshalBinary(b []byte) error {
	var res DocQueryAO1AuthTokens
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
